# -*- coding: utf-8 -*-
"""Streamlit-Code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QBrpqaaPYG-qZ4cw6Q_mjdVo0AKF5SIV
"""

import streamlit as st
import pandas as pd
from pymongo import MongoClient
from urllib.parse import quote_plus
import plotly.express as px
import plotly.graph_objects as go

# Sidebar inputs
st.sidebar.title("MongoDB Connection")
mongo_user = st.sidebar.text_input("MongoDB Username")
mongo_pass = st.sidebar.text_input("MongoDB Password", type="password")
mongo_cluster = st.sidebar.text_input("Cluster Name", value="cluster0")
mongo_db = st.sidebar.text_input("Database", value="movie_franchises")
mongo_col = st.sidebar.text_input("Collection", value="box_office_data")

# Only connect if all fields are filled
if all([mongo_user, mongo_pass, mongo_cluster, mongo_db, mongo_col]):
    try:
        conn_str = f"mongodb+srv://{mongo_user}:{mongo_pass}@{mongo_cluster}.lqvtdrw.mongodb.net/?retryWrites=true&w=majority"
        client = MongoClient(conn_str)
        db = client[mongo_db]
        collection = db[mongo_col]

        # Get data from MongoDB
        data = list(collection.find())
        df = pd.DataFrame(data)

        # Drop MongoDB's internal ID field
        if '_id' in df.columns:
            df.drop(columns=['_id'], inplace=True)

        st.success("Data loaded successfully from MongoDB!")
        st.dataframe(df)
    except Exception as e:
        st.error(f"Could not load data: {e}")
else:
    st.warning("Please enter MongoDB credentials to connect.")

try:
    # Ensure the data is cleaned before plotting
    df['Domestic Box Office'] = df['Domestic Box Office'].replace('[\$,]', '', regex=True).astype(float)
    df['Worldwide Box Office'] = df['Worldwide Box Office'].replace('[\$,]', '', regex=True).astype(float)
    df['No. of Years'] = pd.to_numeric(df['No. of Years'], errors='coerce')
    df = df[df['No. of Years'] > 0]
    df['Box Office Per Year'] = df['Worldwide Box Office'] / df['No. of Years']

    # Display section header for visualizations
    st.subheader("ðŸ“Š Visualizations")

    # Create tabs for each plot
    tab1, tab2, tab3 = st.tabs(["Top 15 Worldwide", "Top 10 Domestic (Pie)", "Box Office Per Year"])

    # Tab 1: Top 15 Franchises by Worldwide Box Office
    with tab1:
        top_15 = df.nlargest(15, 'Worldwide Box Office')
        st.write("Top 15 Franchises by Worldwide Box Office:")
        st.write(top_15[['Franchise', 'Worldwide Box Office']])

        fig = px.bar(top_15,
                     x='Worldwide Box Office',
                     y='Franchise',
                     orientation='h',
                     title="Top 15 Franchises by Worldwide Box Office",
                     labels={'Worldwide Box Office': 'Box Office ($)', 'Franchise': 'Franchise'},
                     color='Worldwide Box Office',
                     color_continuous_scale='Blues')
        fig.update_layout(yaxis=dict(autorange="reversed"))
        st.plotly_chart(fig, use_container_width=True)

    # Tab 2: Top 10 Franchises by Domestic Box Office (Pie Chart)
    with tab2:
        top_10_domestic = df.nlargest(10, 'Domestic Box Office')
        st.write("Top 10 Franchises by Domestic Box Office:")
        st.write(top_10_domestic[['Franchise', 'Domestic Box Office']])

        fig = px.pie(top_10_domestic,
                     names='Franchise',
                     values='Domestic Box Office',
                     title='Top 10 Franchises by Domestic Box Office',
                     hole=0.4)
        st.plotly_chart(fig, use_container_width=True)

    # Tab 3: Top 10 Franchises by Box Office Per Year (Scatter Plot)
    with tab3:
        top_10_per_year = df.nlargest(10, 'Box Office Per Year')
        st.write("Top 10 Franchises by Box Office Per Year:")
        st.write(top_10_per_year[['Franchise', 'Box Office Per Year']])

        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=top_10_per_year['Box Office Per Year'],
            y=top_10_per_year['Franchise'],
            mode='markers+lines',
            marker=dict(size=10, color='crimson'),
            line=dict(width=2),
            name="Box Office Per Year"
        ))
        fig.update_layout(title="Top 10 Franchises by Box Office Per Year",
                          xaxis_title="Box Office Per Year ($)",
                          yaxis=dict(autorange="reversed"),
                          height=500)
        st.plotly_chart(fig, use_container_width=True)

except Exception as e:
    st.warning(f"Could not render plots due to: {e}")
