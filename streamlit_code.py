# -*- coding: utf-8 -*-
"""Streamlit-Code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QBrpqaaPYG-qZ4cw6Q_mjdVo0AKF5SIV
"""

import streamlit as st
import pandas as pd
from pymongo import MongoClient
from urllib.parse import quote_plus
import plotly.express as px
import plotly.graph_objects as go

st.set_page_config(page_title="MongoDB Movie Dashboard", layout="wide")
st.title("🎬 Movie Franchises Box Office Dashboard")

# Sidebar for MongoDB credentials
st.sidebar.header("MongoDB Configuration")
username = st.sidebar.text_input("MongoDB Username", value="muhammedmoghazycs")
password = st.sidebar.text_input("MongoDB Password", type="password")
cluster = st.sidebar.text_input("Cluster Name", value="cluster0.lqvtdrw")
db_name = st.sidebar.text_input("Database Name", value="movie_franchises")
collection_name = st.sidebar.text_input("Collection Name", value="box_office_data")

uploaded_file = st.file_uploader("Upload CSV File", type="csv")

if uploaded_file:
    df = pd.read_csv(uploaded_file)
    st.subheader("📋 Preview of Uploaded Data")
    st.dataframe(df.head())

    if st.button("Upload to MongoDB"):
        try:
            encoded_password = quote_plus(password)
            connection_string = f"mongodb+srv://{username}:{encoded_password}@{cluster}.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0&tls=true"
            client = MongoClient(connection_string)
            db = client[db_name]
            collection = db[collection_name]
            data_dict = df.fillna("None").to_dict("records")
            collection.insert_many(data_dict)
            st.success("✅ Data inserted into MongoDB!")
        except Exception as e:
            st.error(f"❌ Error: {e}")

    # Clean & convert data
    try:
        df['Domestic Box Office'] = df['Domestic Box Office'].replace('[\$,]', '', regex=True).astype(float)
        df['Worldwide Box Office'] = df['Worldwide Box Office'].replace('[\$,]', '', regex=True).astype(float)
        df['No. of Years'] = pd.to_numeric(df['No. of Years'], errors='coerce')
        df = df[df['No. of Years'] > 0]
        df['Box Office Per Year'] = df['Worldwide Box Office'] / df['No. of Years']

        st.subheader("📊 Visualizations")

        tab1, tab2, tab3 = st.tabs(["Top 15 Worldwide", "Top 10 Domestic (Pie)", "Box Office Per Year"])

        with tab1:
            top_15 = df.nlargest(15, 'Worldwide Box Office')
            fig = px.bar(top_15,
                         x='Worldwide Box Office',
                         y='Franchise',
                         orientation='h',
                         title="Top 15 Franchises by Worldwide Box Office",
                         labels={'Worldwide Box Office': 'Box Office ($)', 'Franchise': 'Franchise'},
                         color='Worldwide Box Office',
                         color_continuous_scale='Blues')
            fig.update_layout(yaxis=dict(autorange="reversed"))
            st.plotly_chart(fig, use_container_width=True)

        with tab2:
            top_10_domestic = df.nlargest(10, 'Domestic Box Office')
            fig = px.pie(top_10_domestic,
                         names='Franchise',
                         values='Domestic Box Office',
                         title='Top 10 Franchises by Domestic Box Office',
                         hole=0.4)
            st.plotly_chart(fig, use_container_width=True)

        with tab3:
            top_10_per_year = df.nlargest(10, 'Box Office Per Year')
            fig = go.Figure()
            fig.add_trace(go.Scatter(
                x=top_10_per_year['Box Office Per Year'],
                y=top_10_per_year['Franchise'],
                mode='markers+lines',
                marker=dict(size=10, color='crimson'),
                line=dict(width=2),
                name="Box Office Per Year"
            ))
            fig.update_layout(title="Top 10 Franchises by Box Office Per Year",
                              xaxis_title="Box Office Per Year ($)",
                              yaxis=dict(autorange="reversed"),
                              height=500)
            st.plotly_chart(fig, use_container_width=True)

    except Exception as e:
        st.warning(f"Could not render plots due to: {e}")
